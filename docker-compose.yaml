services:
  mongodb:
    env_file: .env
    image: mongo
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_DATABASE: ${TV_MONGO_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${TV_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${TV_MONGO_PASSWORD}

  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
    ports:
      - 6379:6379
    restart: unless-stopped
    networks:
      - default

  api:
    env_file: .env
    restart: unless-stopped
    build:
      dockerfile: api.Dockerfile
    environment:
      MONGO_DB_HOST: ${TV_MONGO_URL}
      MONGO_DB_DB: ${TV_MONGO_DATABASE}
      MONGO_DB_USER: ${TV_MONGO_USERNAME}
      MONGO_DB_PASSWORD: ${TV_MONGO_PASSWORD}
      OPENSEARCH_HOST: ${TV_OPENSEARCH_HOST}
      OPENSEARCH_ADMIN_PASSWORD: ${TV_OPENSEARCH_ADMIN_PASSWORD}
      REDIS_BROKER_URL: ${TV_REDIS_URL}
      REDIS_RESULT_BACKEND: ${TV_REDIS_URL}
      MIN_COEFF_TO_USER_PREFERENCE: ${TV_MIN_COEFFICIENT_TO_USER_PREFERENCE}
    networks:
      - default
    ports:
      - 8000:8000

  tasks-workers:
    env_file: .env
    restart: unless-stopped
    build:
      dockerfile: celery.Dockerfile
    command: /start_celery_worker
    environment:
      MONGO_DB_HOST: ${TV_MONGO_URL}
      MONGO_DB_DB: ${TV_MONGO_DATABASE}
      MONGO_DB_USER: ${TV_MONGO_USERNAME}
      MONGO_DB_PASSWORD: ${TV_MONGO_PASSWORD}
      OPENSEARCH_HOST: ${TV_OPENSEARCH_HOST}
      OPENSEARCH_ADMIN_PASSWORD: ${TV_OPENSEARCH_ADMIN_PASSWORD}
      REDIS_BROKER_URL: ${TV_REDIS_URL}
      REDIS_RESULT_BACKEND: ${TV_REDIS_URL}
      MIN_COEFF_TO_USER_PREFERENCE: ${TV_MIN_COEFFICIENT_TO_USER_PREFERENCE}
    networks:
      - default

  tasks-scheduler:
    env_file: .env
    restart: unless-stopped
    build:
      dockerfile: celery.Dockerfile
    command: /start_celery_beat
    environment:
      MONGO_DB_HOST: ${TV_MONGO_URL}
      MONGO_DB_DB: ${TV_MONGO_DATABASE}
      MONGO_DB_USER: ${TV_MONGO_USERNAME}
      MONGO_DB_PASSWORD: ${TV_MONGO_PASSWORD}
      OPENSEARCH_HOST: ${TV_OPENSEARCH_HOST}
      OPENSEARCH_ADMIN_PASSWORD: ${TV_OPENSEARCH_ADMIN_PASSWORD}
      REDIS_BROKER_URL: ${TV_REDIS_URL}
      REDIS_RESULT_BACKEND: ${TV_REDIS_URL}
      MIN_COEFF_TO_USER_PREFERENCE: ${TV_MIN_COEFFICIENT_TO_USER_PREFERENCE}
    networks:
      - default

  opensearch-node1: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
    image: opensearchproject/opensearch:latest # Specifying the latest available image - modify if you want a specific version
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node1 # Name the node that will run in this container
      - discovery.seed_hosts=opensearch-node1,opensearch-node2 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2 # Nodes eligible to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=My_custom_pass123   # Sets the demo admin user password when using demo configuration, required for OpenSearch 2.12 and later
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network
      - default

  opensearch-node2:
    image: opensearchproject/opensearch:latest # This should be the same image used for opensearch-node1 to avoid issues
    container_name: opensearch-node2
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node2
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=My_custom_pass123
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data2:/usr/share/opensearch/data
    networks:
      - opensearch-net
      - default

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    container_name: opensearch-dashboards
    ports:
      - 5601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node1:9200","https://opensearch-node2:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
    networks:
      - opensearch-net
      - default


volumes:
  redis_data:
    name: redis_data
  opensearch-data1:
  opensearch-data2:

networks:
  default:
    name: tv_network
    external: true
  opensearch-net: